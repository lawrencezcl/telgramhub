// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                    @id @default(autoincrement())
  telegramId             Int                    @unique @map("telegram_id")
  username               String?                @map("username")
  firstName              String                 @map("first_name")
  notificationFrequency  String                 @default("daily") @map("notification_frequency")
  maxNotificationsPerDay Int                    @default(10) @map("max_notifications_per_day")
  dataRetention          String                 @default("90days") @map("data_retention")
  analyticsOptIn         Boolean                @default(false) @map("analytics_opt_in")
  lastActive             DateTime               @default(now()) @map("last_active")
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")

  // Relations
  keywordSubscriptions  KeywordSubscription[]
  notifications          Notification[]

  @@map("users")
}

model Channel {
  id               Int       @id @default(autoincrement())
  telegramId       Int       @unique @map("telegram_id")
  username         String    @map("username")
  title            String    @map("title")
  description      String?   @map("description")
  category         String    @map("category")
  language         String    @default("en") @map("language")
  isPublic         Boolean   @default(true) @map("is_public")
  subscriberCount  Int       @default(0) @map("subscriber_count")
  growthRate7d     Float     @default(0) @map("growth_rate_7d")
  growthRate30d    Float     @default(0) @map("growth_rate_30d")
  postsPerDay      Float     @default(0) @map("posts_per_day")
  lastPostAt       DateTime? @map("last_post_at")
  engagementScore  Float     @default(0) @map("engagement_score")
  tags             String[]  @default([])
  lastIndexed      DateTime  @default(now()) @map("last_indexed")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  keywordSubscriptions KeywordSubscription[]
  notifications        Notification[]

  @@index([category, isActive, subscriberCount(sort: Desc)])
  @@index([tags, isActive])
  @@index([growthRate7d(sort: Desc), isActive])
  @@index([lastIndexed])
  @@map("channels")
}

model ChannelCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @map("description")
  keywords    String[] @default([])
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("channel_categories")
}

model KeywordSubscription {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  keyword           String
  categories        String[] @default([])
  minSubscribers    Int      @default(0) @map("min_subscribers")
  languages         String[] @default([])
  isActive          Boolean  @default(true) @map("is_active")
  matchedChannels   Int[]    @default([]) @map("matched_channels")
  lastNotificationAt DateTime? @map("last_notification_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, keyword])
  @@index([keyword, isActive])
  @@map("keyword_subscriptions")
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  channelId   Int?     @map("channel_id")
  keyword     String?  @map("keyword")
  type        String   @map("type")
  title       String   @map("title")
  message     String   @map("message")
  priority    String   @default("medium") @map("priority")
  isRead      Boolean  @default(false) @map("is_read")
  sentVia     String   @default("miniapp") @map("sent_via")
  createdAt   DateTime @default(now()) @map("created_at")
  readAt      DateTime? @map("read_at")

  // Relations
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel  Channel? @relation(fields: [channelId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt(sort: Desc)])
  @@index([isRead, createdAt])
  @@map("notifications")
}